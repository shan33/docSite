---
slug: study
title: weapp computed源码...
authors: [xulanshan]
tags: ['weapp', 'js', '源码', '']
---

## computedBehavior
### 文件目录

### 文件目录
/node_modules/miniprogram-computed/src
> behaviors.ts
> data-path.ts
> data-tracer.ts
> index.ts

### data-tracer
3个方法：
**wrapData**、**create**、 **unwrap**

### data-path
7个方法：
**throwParsing**、**parseArrIndex**、**parseIndent**、**parseSinglePath**、**parseMultiPaths**、**parseEOF**、**parseMultiDataPaths**
```javascript
     /** 
     * 解析除当前确切的监听属性
     * @param path 组件watch属性中的key值
     * @param state 存储当前解析的字符串总长度和解析位置
     */
    const parseMultiPaths = function (path, state) {
      // 跳过\s空白符
      while (WHITE_SPACE_CHAR_REGEXP.test(path[state.index])) {
        state.index++;
      }
      // 调用parseSinglePath方法解析
      const ret = [parseSinglePath(path, state)];
      let splitted = false;
      while (state.index < state.length) {
        const ch = path[state.index];
        if (WHITE_SPACE_CHAR_REGEXP.test(ch)) {
          state.index++;
        } else if (ch === ",") {
          splitted = true;
          state.index++;
        } else if (splitted) {
          splitted = false;
          ret.push(parseSinglePath(path, state));
        } else {
          throwParsingError(path, state.index);
        }
      }
      return ret;
    };
    
    /** 
     * 解析单个完整属性路径(a, a.b, a.**, a[12]等) 
     */
    const parseSinglePath = function (path, state) {
      // 截取path的一个简单完整属性名称(类似a, _a, _v, $fd)一般父级别
      const paths = [parseIdent(path, state)];
      // 默认deep监听watch为false
      const options = {
        deepCmp: false,
      };
      // 如果还有字符串，继续解析
      // 遇到[]数组(类似target[1], target[name])解析出数字类型
      // 遇到.对象(类似target.name, target.**)
      while (state.index < state.length) {
        const ch = path[state.index];
        if (ch === "[") {
          state.index++;
          paths.push(parseArrIndex(path, state));
          const nextCh = path[state.index];
          if (nextCh !== "]") throwParsingError(path, state.index);
          state.index++;
        } else if (ch === ".") {
          state.index++;
          const ch = path[state.index];
          if (ch === "*") {
            state.index++;
            const ch = path[state.index];
            // target.** 表示深度监听对象
            if (ch === "*") {
              state.index++;
              options.deepCmp = true;
              break;
            }
            throwParsingError(path, state.index);
          }
          // 对象继续解析target.name 的name字段
          paths.push(parseIdent(path, state));
        } else {
          break;
        }
      }
      return { path: paths, options };
    };

```

### behavior
定义了三个interface.
**BehaviorExtend**、**ObserversItem**、**ComputedWatchInfo**
一个方法：behavior
一个属性：computedWatchDefIdInc(watchDefId为当前watchInfo赋值key并自动累加）

添加data的proxy代理；
利用observer

```javascript

```
